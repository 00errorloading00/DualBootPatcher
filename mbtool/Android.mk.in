LOCAL_PATH := $(call my-dir)

# To debug using valgrind, set DEBUGGING to true and push
# <build dir>/mbtool/mbtool-prefix/tmp/local/armeabi-v7a/mbtool_recovery
# to /tmp/updater. If the recovery used is TWRP, click the console window
# button so tapping the screen won't perform unwanted operations (debugging
# through ADB does not send SIGSTOP to the recovery process).
#
# Then, unpack valgrind (presumably to /data) and run:
#   /data/local/Inst/bin/valgrind \
#       -v --track-origins=yes --leak-check=full \
#       /tmp/updater 3 1 /tmp/test_patched.zip
#
# Note that when DEBUGGING is set to true, the binary is not statically
# linked, so the API 21 libc.so, libdl.so, and libcutils.so are needed.
# If the ROM installed on the device is a Lollipop ROM, just run the
# following before running valgrind:
#   cp /system/lib/libc.so /tmp/
#   cp /system/lib/libdl.so /tmp/
#   cp /system/lib/libcutils.so /tmp/
#   cd /tmp/
DEBUGGING := false

# Whether ccache should be used (highly recommended!)
USE_CCACHE := true


THIRD_PARTY := @CMAKE_BINARY_DIR@/thirdparty
JANSSON_DIR := $(THIRD_PARTY)/android/jansson
LIBSEPOL_DIR := $(THIRD_PARTY)/android/libsepol
LIBXML2_DIR := $(THIRD_PARTY)/android/libxml2
LIBARCHIVE_DIR := $(THIRD_PARTY)/android/libarchive
LIBLOKI_DIR := $(THIRD_PARTY)/android/libloki
LIBLZ4_DIR := $(THIRD_PARTY)/android/liblz4
BOOST_DIR := $(THIRD_PARTY)/android/boost
MBP_MINI_DIR := @CMAKE_BINARY_DIR@/libmbp/mbp-mini-prefix/tmp/local
TOP_DIR := @CMAKE_SOURCE_DIR@
EXTERNAL_DIR := $(TOP_DIR)/external

include $(CLEAR_VARS)
LOCAL_MODULE    := libjansson
LOCAL_SRC_FILES := $(JANSSON_DIR)/lib_$(TARGET_ARCH_ABI)/libjansson.a
include $(PREBUILT_STATIC_LIBRARY)


include $(CLEAR_VARS)
LOCAL_MODULE    := libsepol
LOCAL_SRC_FILES := $(LIBSEPOL_DIR)/lib_$(TARGET_ARCH_ABI)/libsepol.a
include $(PREBUILT_STATIC_LIBRARY)


include $(CLEAR_VARS)
LOCAL_MODULE    := libxml2
LOCAL_SRC_FILES := $(LIBXML2_DIR)/lib_$(TARGET_ARCH_ABI)/libxml2.a
include $(PREBUILT_STATIC_LIBRARY)


include $(CLEAR_VARS)
LOCAL_MODULE    := libarchive
LOCAL_SRC_FILES := $(LIBARCHIVE_DIR)/lib_$(TARGET_ARCH_ABI)/libarchive.a
include $(PREBUILT_STATIC_LIBRARY)


include $(CLEAR_VARS)
LOCAL_MODULE    := libloki
LOCAL_SRC_FILES := $(LIBLOKI_DIR)/lib_$(TARGET_ARCH_ABI)/libloki_static.a
include $(PREBUILT_STATIC_LIBRARY)


include $(CLEAR_VARS)
LOCAL_MODULE    := libmbp-mini
LOCAL_SRC_FILES := $(MBP_MINI_DIR)/$(TARGET_ARCH_ABI)/libmbp-mini.a
include $(PREBUILT_STATIC_LIBRARY)


# Only needed for linking libmbp-mini
include $(CLEAR_VARS)
LOCAL_MODULE    := liblz4
LOCAL_SRC_FILES := $(LIBLZ4_DIR)/lib_$(TARGET_ARCH_ABI)/liblz4.a
include $(PREBUILT_STATIC_LIBRARY)


# Only needed for linking libmbp-mini
include $(CLEAR_VARS)
LOCAL_MODULE    := boost_filesystem
LOCAL_SRC_FILES := $(BOOST_DIR)/lib_$(TARGET_ARCH_ABI)/libboost_filesystem-mt.a
include $(PREBUILT_STATIC_LIBRARY)


# Only needed for linking libmbp-mini
include $(CLEAR_VARS)
LOCAL_MODULE    := boost_system
LOCAL_SRC_FILES := $(BOOST_DIR)/lib_$(TARGET_ARCH_ABI)/libboost_system-mt.a
include $(PREBUILT_STATIC_LIBRARY)


git_version := $(shell git describe --dirty --always --tags)

mbutil_src := \
	util/archive.cpp \
	util/chmod.cpp \
	util/chown.cpp \
	util/cmdline.cpp \
	util/command.cpp \
	util/copy.cpp \
	util/delete.cpp \
	util/directory.cpp \
	util/file.cpp \
	util/fstab.cpp \
	util/fts.cpp \
	util/logging.cpp \
	util/loopdev.cpp \
	util/mount.cpp \
	util/properties.cpp \
	util/selinux.cpp \
	util/socket.cpp \
	util/string.cpp

mbtool_src_base := \
	actions.cpp \
	appsync.cpp \
	common.cpp \
	daemon.cpp \
	main.cpp \
	mount_fstab.cpp \
	packages.cpp \
	roms.cpp \
	sepolpatch.cpp \
	external/mntent.c \
	external/sha.c \
	$(EXTERNAL_DIR)/cppformat/format.cc

mbtool_src_recovery := \
	multiboot.cpp \
	update_binary.cpp \
	update_binary_tool.cpp

mb_common_cflags := \
	-Wall -Wextra -Werror \
	-fno-exceptions -fno-rtti \
	-ffunction-sections -fdata-sections \
	-Os

mb_common_ldflags := \
	-Wl,--gc-sections

mb_common_cflags += -DFMT_EXCEPTIONS=0 -DSPD_EXCEPTIONS=0

ifeq ($(DEBUGGING),true)
mb_common_cflags += -DMB_LIBC_DEBUG
endif


ifeq ($(USE_CCACHE),true)
TARGET_CC := ccache $(TARGET_CC)
TARGET_CXX := ccache $(TARGET_CXX)
endif


include $(CLEAR_VARS)
LOCAL_SRC_FILES := $(mbutil_src)
LOCAL_MODULE := libmbutil
LOCAL_CFLAGS := $(mb_common_cflags)
LOCAL_C_INCLUDES := \
	$(JANSSON_DIR)/include \
	$(LIBARCHIVE_DIR)/include \
	$(LIBSEPOL_DIR)/include \
	$(LIBXML2_DIR)/include/libxml2 \
	$(EXTERNAL_DIR) \
	$(EXTERNAL_DIR)/spdlog/include
include $(BUILD_STATIC_LIBRARY)


include $(CLEAR_VARS)
LOCAL_SRC_FILES := $(mbtool_src_base)

LOCAL_MODULE := mbtool
LOCAL_STATIC_LIBRARIES := libmbutil libjansson libsepol libxml2

LOCAL_C_INCLUDES := \
	$(JANSSON_DIR)/include \
	$(LIBARCHIVE_DIR)/include \
	$(LIBSEPOL_DIR)/include \
	$(LIBXML2_DIR)/include/libxml2 \
	$(EXTERNAL_DIR)/spdlog/include

LOCAL_CFLAGS := $(mb_common_cflags)
LOCAL_CFLAGS += -DMBP_VERSION=\"@MBP_VERSION@\"
LOCAL_CFLAGS += -DGIT_VERSION=\"$(git_version)\"

LOCAL_LDFLAGS := $(mb_common_ldflags)
ifneq ($(DEBUGGING),true)
LOCAL_LDFLAGS += -static
endif

include $(BUILD_EXECUTABLE)


# The recovery version is dynamically linked so that we can can dlopen()
# libmbp-mini for functions needed in the update-binary wrapper.

include $(CLEAR_VARS)
LOCAL_SRC_FILES := $(mbtool_src_base) $(mbtool_src_recovery)

LOCAL_MODULE := mbtool_recovery
LOCAL_STATIC_LIBRARIES := libmbutil libmbp-mini libjansson libsepol libxml2 libarchive libloki liblz4 boost_filesystem boost_system gnustl_static

LOCAL_C_INCLUDES := \
	$(JANSSON_DIR)/include \
	$(LIBARCHIVE_DIR)/include \
	$(LIBSEPOL_DIR)/include \
	$(LIBXML2_DIR)/include/libxml2 \
	$(LIBLOKI_DIR)/include \
	$(TOP_DIR)/libmbp \
	$(TOP_DIR) \
	$(EXTERNAL_DIR)/spdlog/include

LOCAL_CFLAGS := $(mb_common_cflags)
LOCAL_CFLAGS += -DRECOVERY
LOCAL_CFLAGS += -DMBP_VERSION=\"@MBP_VERSION@\"
LOCAL_CFLAGS += -DGIT_VERSION=\"$(git_version)\"

LOCAL_LDFLAGS := $(mb_common_ldflags)
ifeq ($(DEBUGGING),true)
# Use the recovery's loader
LOCAL_LDFLAGS += -Wl,--dynamic-linker=/sbin/linker
else
LOCAL_LDFLAGS += -static
endif

LOCAL_LDFLAGS += -lz

include $(BUILD_EXECUTABLE)
