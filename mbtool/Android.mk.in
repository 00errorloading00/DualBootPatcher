#_LOCAL_PATH := $(call my-dir)
_LOCAL_PATH := @CMAKE_CURRENT_SOURCE_DIR@

# To debug using valgrind, set DEBUGGING to true and push
# <build dir>/mbtool/mbtool-prefix/tmp/local/armeabi-v7a/mbtool_recovery
# to /tmp/updater. If the recovery used is TWRP, click the console window
# button so tapping the screen won't perform unwanted operations (debugging
# through ADB does not send SIGSTOP to the recovery process).
#
# Then, unpack valgrind (presumably to /data) and run:
#   /data/local/Inst/bin/valgrind \
#       -v --track-origins=yes --leak-check=full \
#       /tmp/updater 3 1 /tmp/test_patched.zip
#
# Note that when DEBUGGING is set to true, the binary is not statically
# linked, so the API 21 libc.so, libdl.so, and libcutils.so are needed.
# If the ROM installed on the device is a Lollipop ROM, just run the
# following before running valgrind:
#   cp /system/lib/libc.so /tmp/
#   cp /system/lib/libdl.so /tmp/
#   cp /system/lib/libcutils.so /tmp/
#   cd /tmp/
DEBUGGING := false

# Whether ccache should be used (highly recommended!)
USE_CCACHE := true


MBP_MINI_DIR := @CMAKE_BINARY_DIR@/libmbp/mbp-mini-prefix/tmp/local
MBP_IO_DIR := @CMAKE_BINARY_DIR@/libmbpio/mbpio-android-prefix/tmp/local
TOP_DIR := @CMAKE_SOURCE_DIR@
EXTERNAL_DIR := $(TOP_DIR)/external


SKIP_EXAMPLES := true
include $(EXTERNAL_DIR)/minizip/Android.mk

include @CMAKE_BINARY_DIR@/thirdparty/Android.mk

include miniadbd/Android.mk


include $(CLEAR_VARS)
LOCAL_MODULE    := libmbp-mini
LOCAL_SRC_FILES := $(MBP_MINI_DIR)/$(TARGET_ARCH_ABI)/libmbp-mini.a
include $(PREBUILT_STATIC_LIBRARY)


include $(CLEAR_VARS)
LOCAL_MODULE    := libmbpio
LOCAL_SRC_FILES := $(MBP_IO_DIR)/$(TARGET_ARCH_ABI)/libmbpio.a
include $(PREBUILT_STATIC_LIBRARY)


LOCAL_PATH := $(_LOCAL_PATH)

mbutil_src := \
	autoclose/dir.cpp \
	autoclose/file.cpp \
	util/archive.cpp \
	util/chmod.cpp \
	util/chown.cpp \
	util/cmdline.cpp \
	util/command.cpp \
	util/copy.cpp \
	util/delete.cpp \
	util/directory.cpp \
	util/file.cpp \
	util/fstab.cpp \
	util/fts.cpp \
	util/hash.cpp \
	util/logging.cpp \
	util/loopdev.cpp \
	util/mount.cpp \
	util/path.cpp \
	util/properties.cpp \
	util/selinux.cpp \
	util/socket.cpp \
	util/string.cpp \
	util/time.cpp \
	util/vibrate.cpp

mbtool_src_base := \
	appsync.cpp \
	appsyncmanager.cpp \
	daemon.cpp \
	daemon_v3.cpp \
	init.cpp \
	main.cpp \
	miniadbd.cpp \
	mount_fstab.cpp \
	multiboot.cpp \
	packages.cpp \
	reboot.cpp \
	romconfig.cpp \
	roms.cpp \
	sepolpatch.cpp \
	switcher.cpp \
	uevent_dump.cpp \
	wipe.cpp \
	external/android_reboot.c \
	external/legacy_property_service.cpp \
	external/mntent.c \
	initwrapper/cutils/uevent.cpp \
	initwrapper/devices.cpp \
	initwrapper/util.cpp \
	@CMAKE_CURRENT_BINARY_DIR@/gen/validcerts.cpp \
	@CMAKE_CURRENT_BINARY_DIR@/gen/version.cpp \
	$(EXTERNAL_DIR)/pugixml/src/pugixml.cpp

mbtool_src_recovery := \
	backup.cpp \
	image.cpp \
	installer.cpp \
	rom_installer.cpp \
	update_binary.cpp \
	update_binary_tool.cpp \
	utilities.cpp

mb_common_cflags := \
	-Wall -Wextra -Werror \
	-fno-exceptions -fno-rtti \
	-ffunction-sections -fdata-sections \
	-Os

# minizip type safety
mb_common_cflags += \
	-DSTRICTZIPUNZIP

mb_common_ldflags := \
	-Wl,--gc-sections

# Workaround https://code.google.com/p/android/issues/detail?id=177690
mb_common_ldflags += \
	-fuse-ld=bfd

mb_common_cflags += -DPUGIXML_NO_EXCEPTIONS \
					-DPUGIXML_NO_STL -DPUGIXML_NO_XPATH

ifeq ($(DEBUGGING),true)
mb_common_cflags += -DDYNAMICALLY_LINKED
endif

ifeq ($(ALLOW_DEBUG_CERT),true)
mb_common_cflags += \
	-DALLOW_DEBUG_CERT \
	-DDEBUG_CERT=\"$(DEBUG_CERT)\" \
	-Wno-error=cpp
endif

mb_common_includes := \
	$(TOP_DIR)/libmbp \
	$(TOP_DIR) \
	$(EXTERNAL_DIR) \
	$(EXTERNAL_DIR)/flatbuffers/include \
	$(EXTERNAL_DIR)/pugixml/src


ifeq ($(USE_CCACHE),true)
TARGET_CC := ccache $(TARGET_CC)
TARGET_CXX := ccache $(TARGET_CXX)
endif


include $(CLEAR_VARS)
LOCAL_SRC_FILES := $(mbutil_src)
LOCAL_MODULE := libmbutil
LOCAL_STATIC_LIBRARIES := libarchive libsepol libssl procps-ng liblz4 liblzma liblzo2
LOCAL_CFLAGS := $(mb_common_cflags)
LOCAL_C_INCLUDES := $(EXTERNAL_DIR)
include $(BUILD_STATIC_LIBRARY)


include $(CLEAR_VARS)
LOCAL_SRC_FILES := $(mbtool_src_base)

LOCAL_MODULE := mbtool
LOCAL_STATIC_LIBRARIES := libmbutil libjansson libsepol procps-ng libutils minizip libcrypto libminiadbd

LOCAL_C_INCLUDES := $(mb_common_includes)

LOCAL_CFLAGS := $(mb_common_cflags)

LOCAL_LDFLAGS := $(mb_common_ldflags)
ifneq ($(DEBUGGING),true)
LOCAL_LDFLAGS += -static
endif

LOCAL_LDFLAGS += -lz

#LOCAL_LDFLAGS += -Wl,-Map,$(LOCAL_MODULE).$(TARGET_ARCH_ABI).map

include $(BUILD_EXECUTABLE)


include $(CLEAR_VARS)
LOCAL_SRC_FILES := $(mbtool_src_base) $(mbtool_src_recovery)

LOCAL_MODULE := mbtool_recovery
LOCAL_STATIC_LIBRARIES := libmbutil libmbp-mini libmbpio libjansson libsepol libarchive liblzo2 liblz4 liblzma minizip libcrypto gnustl_static

LOCAL_C_INCLUDES := $(mb_common_includes)

LOCAL_CFLAGS := $(mb_common_cflags)
LOCAL_CFLAGS += -DRECOVERY

LOCAL_LDFLAGS := $(mb_common_ldflags)
ifeq ($(DEBUGGING),true)
# Use the recovery's loader
LOCAL_LDFLAGS += -Wl,--dynamic-linker=/sbin/linker
else
LOCAL_LDFLAGS += -static
endif

LOCAL_LDFLAGS += -lz

#LOCAL_LDFLAGS += -Wl,-Map,$(LOCAL_MODULE).$(TARGET_ARCH_ABI).map

include $(BUILD_EXECUTABLE)
