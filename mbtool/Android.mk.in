LOCAL_PATH := $(call my-dir)
THIRD_PARTY := @CMAKE_BINARY_DIR@/thirdparty
JANSSON_DIR := $(THIRD_PARTY)/android/jansson
LIBSEPOL_DIR := $(THIRD_PARTY)/android/libsepol
LIBXML2_DIR := $(THIRD_PARTY)/android/libxml2
LIBARCHIVE_DIR := $(THIRD_PARTY)/android/libarchive

include $(CLEAR_VARS)
LOCAL_MODULE    := libjansson
LOCAL_SRC_FILES := $(JANSSON_DIR)/lib_$(TARGET_ARCH_ABI)/libjansson.a
include $(PREBUILT_STATIC_LIBRARY)


include $(CLEAR_VARS)
LOCAL_MODULE    := libsepol
LOCAL_SRC_FILES := $(LIBSEPOL_DIR)/lib_$(TARGET_ARCH_ABI)/libsepol.a
include $(PREBUILT_STATIC_LIBRARY)


include $(CLEAR_VARS)
LOCAL_MODULE    := libxml2
LOCAL_SRC_FILES := $(LIBXML2_DIR)/lib_$(TARGET_ARCH_ABI)/libxml2.a
include $(PREBUILT_STATIC_LIBRARY)


include $(CLEAR_VARS)
LOCAL_MODULE    := libarchive
LOCAL_SRC_FILES := $(LIBARCHIVE_DIR)/lib_$(TARGET_ARCH_ABI)/libarchive.a
include $(PREBUILT_STATIC_LIBRARY)


git_version := $(shell git describe --dirty --always --tags)

mbtool_src_base := \
	common.c \
	mount_fstab.c \
	multiboot.c \
	main.c \
	roms.c \
	sepolpatch.c \
	external/mntent.c \
	external/sha.c \
	util/command.c \
	util/copy.c \
	util/delete.c \
	util/directory.c \
	util/file.c \
	util/fstab.c \
	util/logging.c \
	util/loopdev.c \
	util/mount.c \
	util/properties.c

mbtool_src_recovery := \
	update_binary.c \
	update_binary_tool.c \
	util/archive.c \
	util/string.c


include $(CLEAR_VARS)
LOCAL_SRC_FILES := $(mbtool_src_base)

LOCAL_MODULE := mbtool
LOCAL_STATIC_LIBRARIES := libjansson libsepol libxml2

LOCAL_C_INCLUDES := \
	$(JANSSON_DIR)/include \
	$(LIBSEPOL_DIR)/include \
	$(LIBXML2_DIR)/include/libxml2

# Not sure why it tries to compile the binary with g++
TARGET_CXX := $(TOOLCHAIN_PREFIX)gcc

LOCAL_CFLAGS := -std=c11 -Wall -Wextra -Werror

LOCAL_CFLAGS += -DMBP_VERSION=\"@MBP_VERSION@\"
LOCAL_CFLAGS += -DGIT_VERSION=\"$(git_version)\"

LOCAL_LDFLAGS := -static

include $(BUILD_EXECUTABLE)


# The recovery version is dynamically linked so that we can can dlopen()
# libmbp-mini for functions needed in the update-binary wrapper.

include $(CLEAR_VARS)
LOCAL_SRC_FILES := $(mbtool_src_base) $(mbtool_src_recovery)

LOCAL_MODULE := mbtool_recovery
LOCAL_STATIC_LIBRARIES := libjansson libsepol libxml2 libarchive

LOCAL_C_INCLUDES := \
	$(JANSSON_DIR)/include \
	$(LIBSEPOL_DIR)/include \
	$(LIBXML2_DIR)/include/libxml2 \
	$(LIBARCHIVE_DIR)/include

# Not sure why it tries to compile the binary with g++
TARGET_CXX := $(TOOLCHAIN_PREFIX)gcc

LOCAL_CFLAGS := -std=c11 -Wall -Wextra -Werror

LOCAL_CFLAGS += -DRECOVERY

LOCAL_CFLAGS += -DMBP_VERSION=\"@MBP_VERSION@\"
LOCAL_CFLAGS += -DGIT_VERSION=\"$(git_version)\"

# Use the recovery's loader
LOCAL_LDFLAGS := -Wl,--dynamic-linker=/sbin/linker

# Statically link libc
TARGET_LDLIBS := -lgcc
LOCAL_LDLIBS := -nodefaultlibs -Wl,-Bstatic -lc -Wl,-Bdynamic -ldl

LOCAL_LDLIBS += -lz

include $(BUILD_EXECUTABLE)
