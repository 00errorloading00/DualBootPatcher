#_LOCAL_PATH := $(call my-dir)
_LOCAL_PATH := @CMAKE_CURRENT_SOURCE_DIR@

# To debug using valgrind, set DEBUGGING to true and push
# <build dir>/mbtool/mbtool-prefix/tmp/local/armeabi-v7a/mbtool_recovery
# to /tmp/updater. If the recovery used is TWRP, click the console window
# button so tapping the screen won't perform unwanted operations (debugging
# through ADB does not send SIGSTOP to the recovery process).
#
# Then, unpack valgrind (presumably to /data) and run:
#   /data/local/Inst/bin/valgrind \
#       -v --track-origins=yes --leak-check=full \
#       /tmp/updater 3 1 /tmp/test_patched.zip
#
# Note that when DEBUGGING is set to true, the binary is not statically
# linked, so the API 21 libc.so, libdl.so, and libcutils.so are needed.
# If the ROM installed on the device is a Lollipop ROM, just run the
# following before running valgrind:
#   cp /system/lib/libc.so /tmp/
#   cp /system/lib/libdl.so /tmp/
#   cp /system/lib/libcutils.so /tmp/
#   cd /tmp/
DEBUGGING := false

# Whether ccache should be used (highly recommended!)
USE_CCACHE := true

# Allow debug certificate?
# WARNING: Dangerous!
ALLOW_DEBUG_CERT := false

# Specify the certificate here (see validcerts.cpp for more info)
DEBUG_CERT := "3082030d308201f5a003020102020472a96cde300d06092a864886f70d01010b05003037310b30090603550406130255533110300e060355040a1307416e64726f6964311630140603550403130d416e64726f6964204465627567301e170d3134313030323034303632365a170d3434303932343034303632365a3037310b30090603550406130255533110300e060355040a1307416e64726f6964311630140603550403130d416e64726f696420446562756730820122300d06092a864886f70d01010105000382010f003082010a0282010100a4127ea8964c49c4a67ba9a26a770182d5a246f6c630c7a9c18463cffc01a8e54a4b246c26d2e9b43c18803171888925db469734a95d87572cb5970320cfc2b0aef864c67505930b7a0b28ea8b00ffcef9966167342c6b34c779e43894346d11b312d66f79a76c61c84df1eadf0a33dc83e91734b199562fbcd8ebfc8cac0d5e9d1daff5d5d00f868e4f308df0b0389249c96cdc1accb59388e10e1e99adc55b8dbdb9e3e2e3cfafd3b0ffde2b2ca5b2cbeefbd5d6bb9571f9208f1f99c10426b22bbede5f1e7169eb32ad775e7d6d3039feac14494641e628b8633ac7b5c6c5e0c12ae5af2e716cc5e33f46a0f9966fd9a7e763c2b5c4bb9de05aebce4a3e470203010001a321301f301d0603551d0e041604143780552e112a738bb58d36df665954c9de3b0587300d06092a864886f70d01010b050003820101003c02d2df2907b3e43727912b0d590028b397a8d82cb83c259fd3f58503cb4ef35c9aadbdbe34713053ccd8d5f158cc0189db90f9a19cd0c0e2b762c07b6737e0903c4af2bf9bc3c9329c994fc06982806d58656e7d3b6dc8bb4abe0629a099d546d1291b27477c7776feeda85008f986e04951b965ee9147fb06d71910f81dbf456a6883205399225c36402b39fae1f32cfc90bb07426677af0f17656d3022f8f4efc17f9c08353db8978952a4b79775fa119ea4d2096435d00ddcead21eb06107657d697619b33e23073ffec0d73186d85bbc24c329140c609b7ee315c0d50225571115657b36f684b5dc49161613bc73cefabfc00644b38484f52d273bc49b"


THIRD_PARTY := @CMAKE_BINARY_DIR@/thirdparty
JANSSON_DIR := $(THIRD_PARTY)/android/jansson
LIBSEPOL_DIR := $(THIRD_PARTY)/android/libsepol
LIBARCHIVE_DIR := $(THIRD_PARTY)/android/libarchive
LIBLZ4_DIR := $(THIRD_PARTY)/android/liblz4
LIBLZMA_DIR := $(THIRD_PARTY)/android/liblzma
PROCPS_NG_DIR := $(THIRD_PARTY)/android/procps-ng
MBP_MINI_DIR := @CMAKE_BINARY_DIR@/libmbp/mbp-mini-prefix/tmp/local
MBP_IO_DIR := @CMAKE_BINARY_DIR@/libmbpio/mbpio-android-prefix/tmp/local
TOP_DIR := @CMAKE_SOURCE_DIR@
EXTERNAL_DIR := $(TOP_DIR)/external


SKIP_EXAMPLES := true
include $(EXTERNAL_DIR)/libaxmlparser/Android.mk
include $(EXTERNAL_DIR)/minizip/Android.mk


include $(CLEAR_VARS)
LOCAL_MODULE    := libjansson
LOCAL_SRC_FILES := $(JANSSON_DIR)/lib_$(TARGET_ARCH_ABI)/libjansson.a
include $(PREBUILT_STATIC_LIBRARY)


include $(CLEAR_VARS)
LOCAL_MODULE    := libsepol
LOCAL_SRC_FILES := $(LIBSEPOL_DIR)/lib_$(TARGET_ARCH_ABI)/libsepol.a
include $(PREBUILT_STATIC_LIBRARY)


include $(CLEAR_VARS)
LOCAL_MODULE    := libarchive
LOCAL_SRC_FILES := $(LIBARCHIVE_DIR)/lib_$(TARGET_ARCH_ABI)/libarchive.a
include $(PREBUILT_STATIC_LIBRARY)


include $(CLEAR_VARS)
LOCAL_MODULE    := libmbp-mini
LOCAL_SRC_FILES := $(MBP_MINI_DIR)/$(TARGET_ARCH_ABI)/libmbp-mini.a
include $(PREBUILT_STATIC_LIBRARY)


include $(CLEAR_VARS)
LOCAL_MODULE    := libmbpio
LOCAL_SRC_FILES := $(MBP_IO_DIR)/$(TARGET_ARCH_ABI)/libmbpio.a
include $(PREBUILT_STATIC_LIBRARY)


include $(CLEAR_VARS)
LOCAL_MODULE    := procps-ng
LOCAL_SRC_FILES := $(PROCPS_NG_DIR)/lib_$(TARGET_ARCH_ABI)/libprocps.a
include $(PREBUILT_STATIC_LIBRARY)


# Only needed for linking libmbp-mini
include $(CLEAR_VARS)
LOCAL_MODULE    := liblz4
LOCAL_SRC_FILES := $(LIBLZ4_DIR)/lib_$(TARGET_ARCH_ABI)/liblz4.a
include $(PREBUILT_STATIC_LIBRARY)


# Only needed for linking libmbp-mini
include $(CLEAR_VARS)
LOCAL_MODULE    := liblzma
LOCAL_SRC_FILES := $(LIBLZMA_DIR)/lib_$(TARGET_ARCH_ABI)/liblzma.a
include $(PREBUILT_STATIC_LIBRARY)


LOCAL_PATH := $(_LOCAL_PATH)

git_version := $(shell git describe --dirty --always --tags)

mbutil_src := \
	util/archive.cpp \
	util/chmod.cpp \
	util/chown.cpp \
	util/cmdline.cpp \
	util/command.cpp \
	util/copy.cpp \
	util/delete.cpp \
	util/directory.cpp \
	util/file.cpp \
	util/fstab.cpp \
	util/fts.cpp \
	util/hash.cpp \
	util/logging.cpp \
	util/loopdev.cpp \
	util/mount.cpp \
	util/path.cpp \
	util/properties.cpp \
	util/selinux.cpp \
	util/socket.cpp \
	util/string.cpp \
	util/time.cpp

mbtool_src_base := \
	actions.cpp \
	apk.cpp \
	appsync.cpp \
	appsyncmanager.cpp \
	daemon.cpp \
	init.cpp \
	main.cpp \
	mount_fstab.cpp \
	multiboot.cpp \
	packages.cpp \
	reboot.cpp \
	romconfig.cpp \
	roms.cpp \
	sepolpatch.cpp \
	validcerts.cpp \
	external/android_reboot.c \
	external/mntent.c \
	external/sha.c \
	initwrapper/cutils/uevent.cpp \
	initwrapper/devices.cpp \
	initwrapper/util.cpp \
	$(EXTERNAL_DIR)/pugixml/src/pugixml.cpp

mbtool_src_recovery := \
	installer.cpp \
	rom_installer.cpp \
	update_binary.cpp \
	update_binary_tool.cpp \
	utilities.cpp \
	external/legacy_property_service.cpp

mb_common_cflags := \
	-Wall -Wextra -Werror \
	-fno-exceptions -fno-rtti \
	-ffunction-sections -fdata-sections \
	-Os

# minizip type safety
mb_common_cflags += \
	-DSTRICTZIPUNZIP

mb_common_ldflags := \
	-Wl,--gc-sections

mb_common_cflags += -DPUGIXML_NO_EXCEPTIONS \
					-DPUGIXML_NO_STL -DPUGIXML_NO_XPATH

ifeq ($(DEBUGGING),true)
mb_common_cflags += -DMB_LIBC_DEBUG
endif

ifeq ($(ALLOW_DEBUG_CERT),true)
mb_common_cflags += \
	-DALLOW_DEBUG_CERT \
	-DDEBUG_CERT=\"$(DEBUG_CERT)\" \
	-Wno-error=cpp
endif

mb_common_includes := \
	$(JANSSON_DIR)/include \
	$(LIBARCHIVE_DIR)/include \
	$(LIBSEPOL_DIR)/include \
	$(PROCPS_NG_DIR)/include \
	$(TOP_DIR)/libmbp \
	$(TOP_DIR) \
	$(EXTERNAL_DIR) \
	$(EXTERNAL_DIR)/flatbuffers/include \
	$(EXTERNAL_DIR)/libaxmlparser/include \
	$(EXTERNAL_DIR)/pugixml/src


ifeq ($(USE_CCACHE),true)
TARGET_CC := ccache $(TARGET_CC)
TARGET_CXX := ccache $(TARGET_CXX)
endif


include $(CLEAR_VARS)
LOCAL_SRC_FILES := $(mbutil_src)
LOCAL_MODULE := libmbutil
LOCAL_CFLAGS := $(mb_common_cflags)
LOCAL_C_INCLUDES := \
	$(JANSSON_DIR)/include \
	$(LIBARCHIVE_DIR)/include \
	$(LIBSEPOL_DIR)/include \
	$(EXTERNAL_DIR)
include $(BUILD_STATIC_LIBRARY)


include $(CLEAR_VARS)
LOCAL_SRC_FILES := $(mbtool_src_base)

LOCAL_MODULE := mbtool
LOCAL_STATIC_LIBRARIES := libmbutil libjansson libsepol procps-ng libutils libaxmlparser minizip

LOCAL_C_INCLUDES := $(mb_common_includes)

LOCAL_CFLAGS := $(mb_common_cflags)
LOCAL_CFLAGS += -DMBP_VERSION=\"@MBP_VERSION@\"
LOCAL_CFLAGS += -DGIT_VERSION=\"$(git_version)\"

LOCAL_LDFLAGS := $(mb_common_ldflags)
ifneq ($(DEBUGGING),true)
LOCAL_LDFLAGS += -static
endif

LOCAL_LDFLAGS += -lz

#LOCAL_LDFLAGS += -Wl,-Map,$(LOCAL_MODULE).$(TARGET_ARCH_ABI).map

include $(BUILD_EXECUTABLE)


include $(CLEAR_VARS)
LOCAL_SRC_FILES := $(mbtool_src_base) $(mbtool_src_recovery)

LOCAL_MODULE := mbtool_recovery
LOCAL_STATIC_LIBRARIES := libmbutil libmbp-mini libmbpio libjansson libsepol libarchive liblz4 liblzma minizip gnustl_static

LOCAL_C_INCLUDES := $(mb_common_includes)

LOCAL_CFLAGS := $(mb_common_cflags)
LOCAL_CFLAGS += -DRECOVERY
LOCAL_CFLAGS += -DMBP_VERSION=\"@MBP_VERSION@\"
LOCAL_CFLAGS += -DGIT_VERSION=\"$(git_version)\"

LOCAL_LDFLAGS := $(mb_common_ldflags)
ifeq ($(DEBUGGING),true)
# Use the recovery's loader
LOCAL_LDFLAGS += -Wl,--dynamic-linker=/sbin/linker
else
LOCAL_LDFLAGS += -static
endif

LOCAL_LDFLAGS += -lz

#LOCAL_LDFLAGS += -Wl,-Map,$(LOCAL_MODULE).$(TARGET_ARCH_ABI).map

include $(BUILD_EXECUTABLE)
