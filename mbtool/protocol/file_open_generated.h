// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_FILEOPEN_MBTOOL_DAEMON_V3_H_
#define FLATBUFFERS_GENERATED_FILEOPEN_MBTOOL_DAEMON_V3_H_

#include "flatbuffers/flatbuffers.h"

#include "file_chmod_generated.h"
#include "file_close_generated.h"

namespace mbtool {
namespace daemon {
namespace v3 {
struct FileChmodRequest;
struct FileChmodResponse;
}  // namespace v3
}  // namespace daemon
}  // namespace mbtool
namespace mbtool {
namespace daemon {
namespace v3 {
struct FileCloseRequest;
struct FileCloseResponse;
}  // namespace v3
}  // namespace daemon
}  // namespace mbtool

namespace mbtool {
namespace daemon {
namespace v3 {

struct FileOpenRequest;
struct FileOpenResponse;

enum FileOpenFlag {
  FileOpenFlag_APPEND = 0,
  FileOpenFlag_CREAT = 1,
  FileOpenFlag_EXCL = 2,
  FileOpenFlag_RDWR = 3,
  FileOpenFlag_TRUNC = 4,
  FileOpenFlag_WRONLY = 5
};

inline const char **EnumNamesFileOpenFlag() {
  static const char *names[] = { "APPEND", "CREAT", "EXCL", "RDWR", "TRUNC", "WRONLY", nullptr };
  return names;
}

inline const char *EnumNameFileOpenFlag(FileOpenFlag e) { return EnumNamesFileOpenFlag()[static_cast<int>(e)]; }

struct FileOpenRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::String *path() const { return GetPointer<const flatbuffers::String *>(4); }
  const flatbuffers::Vector<int16_t> *flags() const { return GetPointer<const flatbuffers::Vector<int16_t> *>(6); }
  uint32_t perms() const { return GetField<uint32_t>(8, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* path */) &&
           verifier.Verify(path()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* flags */) &&
           verifier.Verify(flags()) &&
           VerifyField<uint32_t>(verifier, 8 /* perms */) &&
           verifier.EndTable();
  }
};

struct FileOpenRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_path(flatbuffers::Offset<flatbuffers::String> path) { fbb_.AddOffset(4, path); }
  void add_flags(flatbuffers::Offset<flatbuffers::Vector<int16_t>> flags) { fbb_.AddOffset(6, flags); }
  void add_perms(uint32_t perms) { fbb_.AddElement<uint32_t>(8, perms, 0); }
  FileOpenRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  FileOpenRequestBuilder &operator=(const FileOpenRequestBuilder &);
  flatbuffers::Offset<FileOpenRequest> Finish() {
    auto o = flatbuffers::Offset<FileOpenRequest>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<FileOpenRequest> CreateFileOpenRequest(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> path = 0,
   flatbuffers::Offset<flatbuffers::Vector<int16_t>> flags = 0,
   uint32_t perms = 0) {
  FileOpenRequestBuilder builder_(_fbb);
  builder_.add_perms(perms);
  builder_.add_flags(flags);
  builder_.add_path(path);
  return builder_.Finish();
}

struct FileOpenResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint8_t success() const { return GetField<uint8_t>(4, 0); }
  const flatbuffers::String *error_msg() const { return GetPointer<const flatbuffers::String *>(6); }
  int32_t id() const { return GetField<int32_t>(8, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, 4 /* success */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* error_msg */) &&
           verifier.Verify(error_msg()) &&
           VerifyField<int32_t>(verifier, 8 /* id */) &&
           verifier.EndTable();
  }
};

struct FileOpenResponseBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_success(uint8_t success) { fbb_.AddElement<uint8_t>(4, success, 0); }
  void add_error_msg(flatbuffers::Offset<flatbuffers::String> error_msg) { fbb_.AddOffset(6, error_msg); }
  void add_id(int32_t id) { fbb_.AddElement<int32_t>(8, id, 0); }
  FileOpenResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  FileOpenResponseBuilder &operator=(const FileOpenResponseBuilder &);
  flatbuffers::Offset<FileOpenResponse> Finish() {
    auto o = flatbuffers::Offset<FileOpenResponse>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<FileOpenResponse> CreateFileOpenResponse(flatbuffers::FlatBufferBuilder &_fbb,
   uint8_t success = 0,
   flatbuffers::Offset<flatbuffers::String> error_msg = 0,
   int32_t id = 0) {
  FileOpenResponseBuilder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_error_msg(error_msg);
  builder_.add_success(success);
  return builder_.Finish();
}

}  // namespace v3
}  // namespace daemon
}  // namespace mbtool

#endif  // FLATBUFFERS_GENERATED_FILEOPEN_MBTOOL_DAEMON_V3_H_
