// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_MBGETINSTALLEDROMS_MBTOOL_DAEMON_V3_H_
#define FLATBUFFERS_GENERATED_MBGETINSTALLEDROMS_MBTOOL_DAEMON_V3_H_

#include "flatbuffers/flatbuffers.h"

#include "file_chmod_generated.h"
#include "file_close_generated.h"
#include "file_open_generated.h"
#include "file_read_generated.h"
#include "file_seek_generated.h"
#include "file_selinux_get_label_generated.h"
#include "file_selinux_set_label_generated.h"
#include "file_stat_generated.h"
#include "file_write_generated.h"
#include "mb_get_version_generated.h"
#include "path_chmod_generated.h"
#include "path_copy_generated.h"
#include "path_get_directory_size_generated.h"
#include "path_selinux_get_label_generated.h"
#include "path_selinux_set_label_generated.h"

namespace mbtool {
namespace daemon {
namespace v3 {
struct FileChmodRequest;
struct FileChmodResponse;
}  // namespace v3
}  // namespace daemon
}  // namespace mbtool
namespace mbtool {
namespace daemon {
namespace v3 {
struct FileCloseRequest;
struct FileCloseResponse;
}  // namespace v3
}  // namespace daemon
}  // namespace mbtool
namespace mbtool {
namespace daemon {
namespace v3 {
struct FileOpenRequest;
struct FileOpenResponse;
}  // namespace v3
}  // namespace daemon
}  // namespace mbtool
namespace mbtool {
namespace daemon {
namespace v3 {
struct FileReadRequest;
struct FileReadResponse;
}  // namespace v3
}  // namespace daemon
}  // namespace mbtool
namespace mbtool {
namespace daemon {
namespace v3 {
struct FileSeekRequest;
struct FileSeekResponse;
}  // namespace v3
}  // namespace daemon
}  // namespace mbtool
namespace mbtool {
namespace daemon {
namespace v3 {
struct StructStat;
struct FileStatRequest;
struct FileStatResponse;
}  // namespace v3
}  // namespace daemon
}  // namespace mbtool
namespace mbtool {
namespace daemon {
namespace v3 {
struct FileWriteRequest;
struct FileWriteResponse;
}  // namespace v3
}  // namespace daemon
}  // namespace mbtool
namespace mbtool {
namespace daemon {
namespace v3 {
struct FileSELinuxGetLabelRequest;
struct FileSELinuxGetLabelResponse;
}  // namespace v3
}  // namespace daemon
}  // namespace mbtool
namespace mbtool {
namespace daemon {
namespace v3 {
struct FileSELinuxSetLabelRequest;
struct FileSELinuxSetLabelResponse;
}  // namespace v3
}  // namespace daemon
}  // namespace mbtool
namespace mbtool {
namespace daemon {
namespace v3 {
struct PathChmodRequest;
struct PathChmodResponse;
}  // namespace v3
}  // namespace daemon
}  // namespace mbtool
namespace mbtool {
namespace daemon {
namespace v3 {
struct PathCopyRequest;
struct PathCopyResponse;
}  // namespace v3
}  // namespace daemon
}  // namespace mbtool
namespace mbtool {
namespace daemon {
namespace v3 {
struct PathSELinuxGetLabelRequest;
struct PathSELinuxGetLabelResponse;
}  // namespace v3
}  // namespace daemon
}  // namespace mbtool
namespace mbtool {
namespace daemon {
namespace v3 {
struct PathSELinuxSetLabelRequest;
struct PathSELinuxSetLabelResponse;
}  // namespace v3
}  // namespace daemon
}  // namespace mbtool
namespace mbtool {
namespace daemon {
namespace v3 {
struct PathGetDirectorySizeRequest;
struct PathGetDirectorySizeResponse;
}  // namespace v3
}  // namespace daemon
}  // namespace mbtool
namespace mbtool {
namespace daemon {
namespace v3 {
struct MbGetVersionRequest;
struct MbGetVersionResponse;
}  // namespace v3
}  // namespace daemon
}  // namespace mbtool

namespace mbtool {
namespace daemon {
namespace v3 {

struct MbRom;
struct MbGetInstalledRomsRequest;
struct MbGetInstalledRomsResponse;

struct MbRom FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::String *id() const { return GetPointer<const flatbuffers::String *>(4); }
  const flatbuffers::String *system_path() const { return GetPointer<const flatbuffers::String *>(6); }
  const flatbuffers::String *cache_path() const { return GetPointer<const flatbuffers::String *>(8); }
  const flatbuffers::String *data_path() const { return GetPointer<const flatbuffers::String *>(10); }
  const flatbuffers::String *version() const { return GetPointer<const flatbuffers::String *>(12); }
  const flatbuffers::String *build() const { return GetPointer<const flatbuffers::String *>(14); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* id */) &&
           verifier.Verify(id()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* system_path */) &&
           verifier.Verify(system_path()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* cache_path */) &&
           verifier.Verify(cache_path()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 10 /* data_path */) &&
           verifier.Verify(data_path()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 12 /* version */) &&
           verifier.Verify(version()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 14 /* build */) &&
           verifier.Verify(build()) &&
           verifier.EndTable();
  }
};

struct MbRomBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(flatbuffers::Offset<flatbuffers::String> id) { fbb_.AddOffset(4, id); }
  void add_system_path(flatbuffers::Offset<flatbuffers::String> system_path) { fbb_.AddOffset(6, system_path); }
  void add_cache_path(flatbuffers::Offset<flatbuffers::String> cache_path) { fbb_.AddOffset(8, cache_path); }
  void add_data_path(flatbuffers::Offset<flatbuffers::String> data_path) { fbb_.AddOffset(10, data_path); }
  void add_version(flatbuffers::Offset<flatbuffers::String> version) { fbb_.AddOffset(12, version); }
  void add_build(flatbuffers::Offset<flatbuffers::String> build) { fbb_.AddOffset(14, build); }
  MbRomBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MbRomBuilder &operator=(const MbRomBuilder &);
  flatbuffers::Offset<MbRom> Finish() {
    auto o = flatbuffers::Offset<MbRom>(fbb_.EndTable(start_, 6));
    return o;
  }
};

inline flatbuffers::Offset<MbRom> CreateMbRom(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> id = 0,
   flatbuffers::Offset<flatbuffers::String> system_path = 0,
   flatbuffers::Offset<flatbuffers::String> cache_path = 0,
   flatbuffers::Offset<flatbuffers::String> data_path = 0,
   flatbuffers::Offset<flatbuffers::String> version = 0,
   flatbuffers::Offset<flatbuffers::String> build = 0) {
  MbRomBuilder builder_(_fbb);
  builder_.add_build(build);
  builder_.add_version(version);
  builder_.add_data_path(data_path);
  builder_.add_cache_path(cache_path);
  builder_.add_system_path(system_path);
  builder_.add_id(id);
  return builder_.Finish();
}

struct MbGetInstalledRomsRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct MbGetInstalledRomsRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  MbGetInstalledRomsRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MbGetInstalledRomsRequestBuilder &operator=(const MbGetInstalledRomsRequestBuilder &);
  flatbuffers::Offset<MbGetInstalledRomsRequest> Finish() {
    auto o = flatbuffers::Offset<MbGetInstalledRomsRequest>(fbb_.EndTable(start_, 0));
    return o;
  }
};

inline flatbuffers::Offset<MbGetInstalledRomsRequest> CreateMbGetInstalledRomsRequest(flatbuffers::FlatBufferBuilder &_fbb) {
  MbGetInstalledRomsRequestBuilder builder_(_fbb);
  return builder_.Finish();
}

struct MbGetInstalledRomsResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::Vector<flatbuffers::Offset<MbRom>> *roms() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<MbRom>> *>(4); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* roms */) &&
           verifier.Verify(roms()) &&
           verifier.VerifyVectorOfTables(roms()) &&
           verifier.EndTable();
  }
};

struct MbGetInstalledRomsResponseBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_roms(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<MbRom>>> roms) { fbb_.AddOffset(4, roms); }
  MbGetInstalledRomsResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MbGetInstalledRomsResponseBuilder &operator=(const MbGetInstalledRomsResponseBuilder &);
  flatbuffers::Offset<MbGetInstalledRomsResponse> Finish() {
    auto o = flatbuffers::Offset<MbGetInstalledRomsResponse>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<MbGetInstalledRomsResponse> CreateMbGetInstalledRomsResponse(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<MbRom>>> roms = 0) {
  MbGetInstalledRomsResponseBuilder builder_(_fbb);
  builder_.add_roms(roms);
  return builder_.Finish();
}

}  // namespace v3
}  // namespace daemon
}  // namespace mbtool

#endif  // FLATBUFFERS_GENERATED_MBGETINSTALLEDROMS_MBTOOL_DAEMON_V3_H_
