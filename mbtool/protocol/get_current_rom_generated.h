// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_GETCURRENTROM_MBTOOL_DAEMON_V2_H_
#define FLATBUFFERS_GENERATED_GETCURRENTROM_MBTOOL_DAEMON_V2_H_

#include "flatbuffers/flatbuffers.h"

namespace mbtool {
namespace daemon {
namespace v2 {
struct GetVersionRequest;
struct GetVersionResponse;
}  // namespace v2
}  // namespace daemon
}  // namespace mbtool
namespace mbtool {
namespace daemon {
namespace v2 {
struct Rom;
struct GetRomsListRequest;
struct GetRomsListResponse;
}  // namespace v2
}  // namespace daemon
}  // namespace mbtool
namespace mbtool {
namespace daemon {
namespace v2 {
struct GetBuiltinRomIdsRequest;
struct GetBuiltinRomIdsResponse;
}  // namespace v2
}  // namespace daemon
}  // namespace mbtool

namespace mbtool {
namespace daemon {
namespace v2 {

struct GetCurrentRomRequest;
struct GetCurrentRomResponse;

struct GetCurrentRomRequest : private flatbuffers::Table {
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct GetCurrentRomRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  GetCurrentRomRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  GetCurrentRomRequestBuilder &operator=(const GetCurrentRomRequestBuilder &);
  flatbuffers::Offset<GetCurrentRomRequest> Finish() {
    auto o = flatbuffers::Offset<GetCurrentRomRequest>(fbb_.EndTable(start_, 0));
    return o;
  }
};

inline flatbuffers::Offset<GetCurrentRomRequest> CreateGetCurrentRomRequest(flatbuffers::FlatBufferBuilder &_fbb) {
  GetCurrentRomRequestBuilder builder_(_fbb);
  return builder_.Finish();
}

struct GetCurrentRomResponse : private flatbuffers::Table {
  const flatbuffers::String *rom_id() const { return GetPointer<const flatbuffers::String *>(4); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* rom_id */) &&
           verifier.Verify(rom_id()) &&
           verifier.EndTable();
  }
};

struct GetCurrentRomResponseBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_rom_id(flatbuffers::Offset<flatbuffers::String> rom_id) { fbb_.AddOffset(4, rom_id); }
  GetCurrentRomResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  GetCurrentRomResponseBuilder &operator=(const GetCurrentRomResponseBuilder &);
  flatbuffers::Offset<GetCurrentRomResponse> Finish() {
    auto o = flatbuffers::Offset<GetCurrentRomResponse>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<GetCurrentRomResponse> CreateGetCurrentRomResponse(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> rom_id = 0) {
  GetCurrentRomResponseBuilder builder_(_fbb);
  builder_.add_rom_id(rom_id);
  return builder_.Finish();
}

}  // namespace v2
}  // namespace daemon
}  // namespace mbtool

#endif  // FLATBUFFERS_GENERATED_GETCURRENTROM_MBTOOL_DAEMON_V2_H_
