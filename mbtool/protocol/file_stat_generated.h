// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_FILESTAT_MBTOOL_DAEMON_V3_H_
#define FLATBUFFERS_GENERATED_FILESTAT_MBTOOL_DAEMON_V3_H_

#include "flatbuffers/flatbuffers.h"

#include "file_chmod_generated.h"
#include "file_close_generated.h"
#include "file_open_generated.h"
#include "file_read_generated.h"
#include "file_seek_generated.h"

namespace mbtool {
namespace daemon {
namespace v3 {
struct FileChmodRequest;
struct FileChmodResponse;
}  // namespace v3
}  // namespace daemon
}  // namespace mbtool
namespace mbtool {
namespace daemon {
namespace v3 {
struct FileCloseRequest;
struct FileCloseResponse;
}  // namespace v3
}  // namespace daemon
}  // namespace mbtool
namespace mbtool {
namespace daemon {
namespace v3 {
struct FileOpenRequest;
struct FileOpenResponse;
}  // namespace v3
}  // namespace daemon
}  // namespace mbtool
namespace mbtool {
namespace daemon {
namespace v3 {
struct FileReadRequest;
struct FileReadResponse;
}  // namespace v3
}  // namespace daemon
}  // namespace mbtool
namespace mbtool {
namespace daemon {
namespace v3 {
struct FileSeekRequest;
struct FileSeekResponse;
}  // namespace v3
}  // namespace daemon
}  // namespace mbtool

namespace mbtool {
namespace daemon {
namespace v3 {

struct StructStat;
struct FileStatRequest;
struct FileStatResponse;

struct StructStat FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint64_t st_dev() const { return GetField<uint64_t>(4, 0); }
  uint64_t st_ino() const { return GetField<uint64_t>(6, 0); }
  uint32_t st_mode() const { return GetField<uint32_t>(8, 0); }
  uint64_t st_nlink() const { return GetField<uint64_t>(10, 0); }
  uint32_t st_uid() const { return GetField<uint32_t>(12, 0); }
  uint32_t st_gid() const { return GetField<uint32_t>(14, 0); }
  uint64_t st_rdev() const { return GetField<uint64_t>(16, 0); }
  uint64_t st_size() const { return GetField<uint64_t>(18, 0); }
  uint64_t st_blksize() const { return GetField<uint64_t>(20, 0); }
  uint64_t st_blocks() const { return GetField<uint64_t>(22, 0); }
  uint64_t st_atime() const { return GetField<uint64_t>(24, 0); }
  uint64_t st_mtime() const { return GetField<uint64_t>(26, 0); }
  uint64_t st_ctime() const { return GetField<uint64_t>(28, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, 4 /* st_dev */) &&
           VerifyField<uint64_t>(verifier, 6 /* st_ino */) &&
           VerifyField<uint32_t>(verifier, 8 /* st_mode */) &&
           VerifyField<uint64_t>(verifier, 10 /* st_nlink */) &&
           VerifyField<uint32_t>(verifier, 12 /* st_uid */) &&
           VerifyField<uint32_t>(verifier, 14 /* st_gid */) &&
           VerifyField<uint64_t>(verifier, 16 /* st_rdev */) &&
           VerifyField<uint64_t>(verifier, 18 /* st_size */) &&
           VerifyField<uint64_t>(verifier, 20 /* st_blksize */) &&
           VerifyField<uint64_t>(verifier, 22 /* st_blocks */) &&
           VerifyField<uint64_t>(verifier, 24 /* st_atime */) &&
           VerifyField<uint64_t>(verifier, 26 /* st_mtime */) &&
           VerifyField<uint64_t>(verifier, 28 /* st_ctime */) &&
           verifier.EndTable();
  }
};

struct StructStatBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_st_dev(uint64_t st_dev) { fbb_.AddElement<uint64_t>(4, st_dev, 0); }
  void add_st_ino(uint64_t st_ino) { fbb_.AddElement<uint64_t>(6, st_ino, 0); }
  void add_st_mode(uint32_t st_mode) { fbb_.AddElement<uint32_t>(8, st_mode, 0); }
  void add_st_nlink(uint64_t st_nlink) { fbb_.AddElement<uint64_t>(10, st_nlink, 0); }
  void add_st_uid(uint32_t st_uid) { fbb_.AddElement<uint32_t>(12, st_uid, 0); }
  void add_st_gid(uint32_t st_gid) { fbb_.AddElement<uint32_t>(14, st_gid, 0); }
  void add_st_rdev(uint64_t st_rdev) { fbb_.AddElement<uint64_t>(16, st_rdev, 0); }
  void add_st_size(uint64_t st_size) { fbb_.AddElement<uint64_t>(18, st_size, 0); }
  void add_st_blksize(uint64_t st_blksize) { fbb_.AddElement<uint64_t>(20, st_blksize, 0); }
  void add_st_blocks(uint64_t st_blocks) { fbb_.AddElement<uint64_t>(22, st_blocks, 0); }
  void add_st_atime(uint64_t st_atime) { fbb_.AddElement<uint64_t>(24, st_atime, 0); }
  void add_st_mtime(uint64_t st_mtime) { fbb_.AddElement<uint64_t>(26, st_mtime, 0); }
  void add_st_ctime(uint64_t st_ctime) { fbb_.AddElement<uint64_t>(28, st_ctime, 0); }
  StructStatBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  StructStatBuilder &operator=(const StructStatBuilder &);
  flatbuffers::Offset<StructStat> Finish() {
    auto o = flatbuffers::Offset<StructStat>(fbb_.EndTable(start_, 13));
    return o;
  }
};

inline flatbuffers::Offset<StructStat> CreateStructStat(flatbuffers::FlatBufferBuilder &_fbb,
   uint64_t st_dev = 0,
   uint64_t st_ino = 0,
   uint32_t st_mode = 0,
   uint64_t st_nlink = 0,
   uint32_t st_uid = 0,
   uint32_t st_gid = 0,
   uint64_t st_rdev = 0,
   uint64_t st_size = 0,
   uint64_t st_blksize = 0,
   uint64_t st_blocks = 0,
   uint64_t st_atime = 0,
   uint64_t st_mtime = 0,
   uint64_t st_ctime = 0) {
  StructStatBuilder builder_(_fbb);
  builder_.add_st_ctime(st_ctime);
  builder_.add_st_mtime(st_mtime);
  builder_.add_st_atime(st_atime);
  builder_.add_st_blocks(st_blocks);
  builder_.add_st_blksize(st_blksize);
  builder_.add_st_size(st_size);
  builder_.add_st_rdev(st_rdev);
  builder_.add_st_nlink(st_nlink);
  builder_.add_st_ino(st_ino);
  builder_.add_st_dev(st_dev);
  builder_.add_st_gid(st_gid);
  builder_.add_st_uid(st_uid);
  builder_.add_st_mode(st_mode);
  return builder_.Finish();
}

struct FileStatRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  int32_t id() const { return GetField<int32_t>(4, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, 4 /* id */) &&
           verifier.EndTable();
  }
};

struct FileStatRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(int32_t id) { fbb_.AddElement<int32_t>(4, id, 0); }
  FileStatRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  FileStatRequestBuilder &operator=(const FileStatRequestBuilder &);
  flatbuffers::Offset<FileStatRequest> Finish() {
    auto o = flatbuffers::Offset<FileStatRequest>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<FileStatRequest> CreateFileStatRequest(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t id = 0) {
  FileStatRequestBuilder builder_(_fbb);
  builder_.add_id(id);
  return builder_.Finish();
}

struct FileStatResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint8_t success() const { return GetField<uint8_t>(4, 0); }
  const flatbuffers::String *error_msg() const { return GetPointer<const flatbuffers::String *>(6); }
  const StructStat *stat() const { return GetPointer<const StructStat *>(8); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, 4 /* success */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* error_msg */) &&
           verifier.Verify(error_msg()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* stat */) &&
           verifier.VerifyTable(stat()) &&
           verifier.EndTable();
  }
};

struct FileStatResponseBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_success(uint8_t success) { fbb_.AddElement<uint8_t>(4, success, 0); }
  void add_error_msg(flatbuffers::Offset<flatbuffers::String> error_msg) { fbb_.AddOffset(6, error_msg); }
  void add_stat(flatbuffers::Offset<StructStat> stat) { fbb_.AddOffset(8, stat); }
  FileStatResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  FileStatResponseBuilder &operator=(const FileStatResponseBuilder &);
  flatbuffers::Offset<FileStatResponse> Finish() {
    auto o = flatbuffers::Offset<FileStatResponse>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<FileStatResponse> CreateFileStatResponse(flatbuffers::FlatBufferBuilder &_fbb,
   uint8_t success = 0,
   flatbuffers::Offset<flatbuffers::String> error_msg = 0,
   flatbuffers::Offset<StructStat> stat = 0) {
  FileStatResponseBuilder builder_(_fbb);
  builder_.add_stat(stat);
  builder_.add_error_msg(error_msg);
  builder_.add_success(success);
  return builder_.Finish();
}

}  // namespace v3
}  // namespace daemon
}  // namespace mbtool

#endif  // FLATBUFFERS_GENERATED_FILESTAT_MBTOOL_DAEMON_V3_H_
