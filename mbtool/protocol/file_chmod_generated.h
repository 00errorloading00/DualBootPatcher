// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_FILECHMOD_MBTOOL_DAEMON_V3_H_
#define FLATBUFFERS_GENERATED_FILECHMOD_MBTOOL_DAEMON_V3_H_

#include "flatbuffers/flatbuffers.h"


namespace mbtool {
namespace daemon {
namespace v3 {

struct FileChmodRequest;
struct FileChmodResponse;

struct FileChmodRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  int32_t id() const { return GetField<int32_t>(4, 0); }
  uint32_t mode() const { return GetField<uint32_t>(6, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, 4 /* id */) &&
           VerifyField<uint32_t>(verifier, 6 /* mode */) &&
           verifier.EndTable();
  }
};

struct FileChmodRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(int32_t id) { fbb_.AddElement<int32_t>(4, id, 0); }
  void add_mode(uint32_t mode) { fbb_.AddElement<uint32_t>(6, mode, 0); }
  FileChmodRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  FileChmodRequestBuilder &operator=(const FileChmodRequestBuilder &);
  flatbuffers::Offset<FileChmodRequest> Finish() {
    auto o = flatbuffers::Offset<FileChmodRequest>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<FileChmodRequest> CreateFileChmodRequest(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t id = 0,
   uint32_t mode = 0) {
  FileChmodRequestBuilder builder_(_fbb);
  builder_.add_mode(mode);
  builder_.add_id(id);
  return builder_.Finish();
}

struct FileChmodResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint8_t success() const { return GetField<uint8_t>(4, 0); }
  const flatbuffers::String *error_msg() const { return GetPointer<const flatbuffers::String *>(6); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, 4 /* success */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* error_msg */) &&
           verifier.Verify(error_msg()) &&
           verifier.EndTable();
  }
};

struct FileChmodResponseBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_success(uint8_t success) { fbb_.AddElement<uint8_t>(4, success, 0); }
  void add_error_msg(flatbuffers::Offset<flatbuffers::String> error_msg) { fbb_.AddOffset(6, error_msg); }
  FileChmodResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  FileChmodResponseBuilder &operator=(const FileChmodResponseBuilder &);
  flatbuffers::Offset<FileChmodResponse> Finish() {
    auto o = flatbuffers::Offset<FileChmodResponse>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<FileChmodResponse> CreateFileChmodResponse(flatbuffers::FlatBufferBuilder &_fbb,
   uint8_t success = 0,
   flatbuffers::Offset<flatbuffers::String> error_msg = 0) {
  FileChmodResponseBuilder builder_(_fbb);
  builder_.add_error_msg(error_msg);
  builder_.add_success(success);
  return builder_.Finish();
}

}  // namespace v3
}  // namespace daemon
}  // namespace mbtool

#endif  // FLATBUFFERS_GENERATED_FILECHMOD_MBTOOL_DAEMON_V3_H_
