// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_GETROMSLIST_MBTOOL_DAEMON_V2_H_
#define FLATBUFFERS_GENERATED_GETROMSLIST_MBTOOL_DAEMON_V2_H_

#include "flatbuffers/flatbuffers.h"

namespace mbtool {
namespace daemon {
namespace v2 {
struct GetVersionRequest;
struct GetVersionResponse;
}  // namespace v2
}  // namespace daemon
}  // namespace mbtool

namespace mbtool {
namespace daemon {
namespace v2 {

struct Rom;
struct GetRomsListRequest;
struct GetRomsListResponse;

struct Rom : private flatbuffers::Table {
  const flatbuffers::String *id() const { return GetPointer<const flatbuffers::String *>(4); }
  const flatbuffers::String *system_path() const { return GetPointer<const flatbuffers::String *>(6); }
  const flatbuffers::String *cache_path() const { return GetPointer<const flatbuffers::String *>(8); }
  const flatbuffers::String *data_path() const { return GetPointer<const flatbuffers::String *>(10); }
  const flatbuffers::String *version() const { return GetPointer<const flatbuffers::String *>(12); }
  const flatbuffers::String *build() const { return GetPointer<const flatbuffers::String *>(14); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* id */) &&
           verifier.Verify(id()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* system_path */) &&
           verifier.Verify(system_path()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* cache_path */) &&
           verifier.Verify(cache_path()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 10 /* data_path */) &&
           verifier.Verify(data_path()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 12 /* version */) &&
           verifier.Verify(version()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 14 /* build */) &&
           verifier.Verify(build()) &&
           verifier.EndTable();
  }
};

struct RomBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(flatbuffers::Offset<flatbuffers::String> id) { fbb_.AddOffset(4, id); }
  void add_system_path(flatbuffers::Offset<flatbuffers::String> system_path) { fbb_.AddOffset(6, system_path); }
  void add_cache_path(flatbuffers::Offset<flatbuffers::String> cache_path) { fbb_.AddOffset(8, cache_path); }
  void add_data_path(flatbuffers::Offset<flatbuffers::String> data_path) { fbb_.AddOffset(10, data_path); }
  void add_version(flatbuffers::Offset<flatbuffers::String> version) { fbb_.AddOffset(12, version); }
  void add_build(flatbuffers::Offset<flatbuffers::String> build) { fbb_.AddOffset(14, build); }
  RomBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  RomBuilder &operator=(const RomBuilder &);
  flatbuffers::Offset<Rom> Finish() {
    auto o = flatbuffers::Offset<Rom>(fbb_.EndTable(start_, 6));
    return o;
  }
};

inline flatbuffers::Offset<Rom> CreateRom(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> id = 0,
   flatbuffers::Offset<flatbuffers::String> system_path = 0,
   flatbuffers::Offset<flatbuffers::String> cache_path = 0,
   flatbuffers::Offset<flatbuffers::String> data_path = 0,
   flatbuffers::Offset<flatbuffers::String> version = 0,
   flatbuffers::Offset<flatbuffers::String> build = 0) {
  RomBuilder builder_(_fbb);
  builder_.add_build(build);
  builder_.add_version(version);
  builder_.add_data_path(data_path);
  builder_.add_cache_path(cache_path);
  builder_.add_system_path(system_path);
  builder_.add_id(id);
  return builder_.Finish();
}

struct GetRomsListRequest : private flatbuffers::Table {
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct GetRomsListRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  GetRomsListRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  GetRomsListRequestBuilder &operator=(const GetRomsListRequestBuilder &);
  flatbuffers::Offset<GetRomsListRequest> Finish() {
    auto o = flatbuffers::Offset<GetRomsListRequest>(fbb_.EndTable(start_, 0));
    return o;
  }
};

inline flatbuffers::Offset<GetRomsListRequest> CreateGetRomsListRequest(flatbuffers::FlatBufferBuilder &_fbb) {
  GetRomsListRequestBuilder builder_(_fbb);
  return builder_.Finish();
}

struct GetRomsListResponse : private flatbuffers::Table {
  const flatbuffers::Vector<flatbuffers::Offset<Rom>> *roms() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Rom>> *>(4); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* roms */) &&
           verifier.Verify(roms()) &&
           verifier.VerifyVectorOfTables(roms()) &&
           verifier.EndTable();
  }
};

struct GetRomsListResponseBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_roms(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Rom>>> roms) { fbb_.AddOffset(4, roms); }
  GetRomsListResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  GetRomsListResponseBuilder &operator=(const GetRomsListResponseBuilder &);
  flatbuffers::Offset<GetRomsListResponse> Finish() {
    auto o = flatbuffers::Offset<GetRomsListResponse>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<GetRomsListResponse> CreateGetRomsListResponse(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Rom>>> roms = 0) {
  GetRomsListResponseBuilder builder_(_fbb);
  builder_.add_roms(roms);
  return builder_.Finish();
}

}  // namespace v2
}  // namespace daemon
}  // namespace mbtool

#endif  // FLATBUFFERS_GENERATED_GETROMSLIST_MBTOOL_DAEMON_V2_H_
