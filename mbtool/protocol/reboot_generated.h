// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_REBOOT_MBTOOL_DAEMON_V3_H_
#define FLATBUFFERS_GENERATED_REBOOT_MBTOOL_DAEMON_V3_H_

#include "flatbuffers/flatbuffers.h"


namespace mbtool {
namespace daemon {
namespace v3 {

struct RebootRequest;
struct RebootResponse;

enum RebootType {
  RebootType_FRAMEWORK = 0,
  RebootType_INIT = 1,
  RebootType_DIRECT = 2,
  RebootType_MIN = RebootType_FRAMEWORK,
  RebootType_MAX = RebootType_DIRECT
};

inline const char **EnumNamesRebootType() {
  static const char *names[] = { "FRAMEWORK", "INIT", "DIRECT", nullptr };
  return names;
}

inline const char *EnumNameRebootType(RebootType e) { return EnumNamesRebootType()[static_cast<int>(e)]; }

struct RebootRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ARG = 4,
    VT_TYPE = 6,
    VT_CONFIRM = 8
  };
  const flatbuffers::String *arg() const { return GetPointer<const flatbuffers::String *>(VT_ARG); }
  RebootType type() const { return static_cast<RebootType>(GetField<int16_t>(VT_TYPE, 0)); }
  bool confirm() const { return GetField<uint8_t>(VT_CONFIRM, 0) != 0; }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_ARG) &&
           verifier.Verify(arg()) &&
           VerifyField<int16_t>(verifier, VT_TYPE) &&
           VerifyField<uint8_t>(verifier, VT_CONFIRM) &&
           verifier.EndTable();
  }
};

struct RebootRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_arg(flatbuffers::Offset<flatbuffers::String> arg) { fbb_.AddOffset(RebootRequest::VT_ARG, arg); }
  void add_type(RebootType type) { fbb_.AddElement<int16_t>(RebootRequest::VT_TYPE, static_cast<int16_t>(type), 0); }
  void add_confirm(bool confirm) { fbb_.AddElement<uint8_t>(RebootRequest::VT_CONFIRM, static_cast<uint8_t>(confirm), 0); }
  RebootRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  RebootRequestBuilder &operator=(const RebootRequestBuilder &);
  flatbuffers::Offset<RebootRequest> Finish() {
    auto o = flatbuffers::Offset<RebootRequest>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<RebootRequest> CreateRebootRequest(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> arg = 0,
   RebootType type = RebootType_FRAMEWORK,
   bool confirm = false) {
  RebootRequestBuilder builder_(_fbb);
  builder_.add_arg(arg);
  builder_.add_type(type);
  builder_.add_confirm(confirm);
  return builder_.Finish();
}

struct RebootResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_SUCCESS = 4
  };
  bool success() const { return GetField<uint8_t>(VT_SUCCESS, 0) != 0; }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_SUCCESS) &&
           verifier.EndTable();
  }
};

struct RebootResponseBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_success(bool success) { fbb_.AddElement<uint8_t>(RebootResponse::VT_SUCCESS, static_cast<uint8_t>(success), 0); }
  RebootResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  RebootResponseBuilder &operator=(const RebootResponseBuilder &);
  flatbuffers::Offset<RebootResponse> Finish() {
    auto o = flatbuffers::Offset<RebootResponse>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<RebootResponse> CreateRebootResponse(flatbuffers::FlatBufferBuilder &_fbb,
   bool success = false) {
  RebootResponseBuilder builder_(_fbb);
  builder_.add_success(success);
  return builder_.Finish();
}

}  // namespace v3
}  // namespace daemon
}  // namespace mbtool

#endif  // FLATBUFFERS_GENERATED_REBOOT_MBTOOL_DAEMON_V3_H_
