// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_FILEWRITE_MBTOOL_DAEMON_V3_H_
#define FLATBUFFERS_GENERATED_FILEWRITE_MBTOOL_DAEMON_V3_H_

#include "flatbuffers/flatbuffers.h"

#include "file_chmod_generated.h"
#include "file_close_generated.h"
#include "file_open_generated.h"
#include "file_read_generated.h"
#include "file_seek_generated.h"
#include "file_stat_generated.h"

namespace mbtool {
namespace daemon {
namespace v3 {
struct FileChmodRequest;
struct FileChmodResponse;
}  // namespace v3
}  // namespace daemon
}  // namespace mbtool
namespace mbtool {
namespace daemon {
namespace v3 {
struct FileCloseRequest;
struct FileCloseResponse;
}  // namespace v3
}  // namespace daemon
}  // namespace mbtool
namespace mbtool {
namespace daemon {
namespace v3 {
struct FileOpenRequest;
struct FileOpenResponse;
}  // namespace v3
}  // namespace daemon
}  // namespace mbtool
namespace mbtool {
namespace daemon {
namespace v3 {
struct FileReadRequest;
struct FileReadResponse;
}  // namespace v3
}  // namespace daemon
}  // namespace mbtool
namespace mbtool {
namespace daemon {
namespace v3 {
struct FileSeekRequest;
struct FileSeekResponse;
}  // namespace v3
}  // namespace daemon
}  // namespace mbtool
namespace mbtool {
namespace daemon {
namespace v3 {
struct StructStat;
struct FileStatRequest;
struct FileStatResponse;
}  // namespace v3
}  // namespace daemon
}  // namespace mbtool

namespace mbtool {
namespace daemon {
namespace v3 {

struct FileWriteRequest;
struct FileWriteResponse;

struct FileWriteRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  int32_t id() const { return GetField<int32_t>(4, 0); }
  const flatbuffers::Vector<uint8_t> *data() const { return GetPointer<const flatbuffers::Vector<uint8_t> *>(6); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, 4 /* id */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* data */) &&
           verifier.Verify(data()) &&
           verifier.EndTable();
  }
};

struct FileWriteRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(int32_t id) { fbb_.AddElement<int32_t>(4, id, 0); }
  void add_data(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data) { fbb_.AddOffset(6, data); }
  FileWriteRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  FileWriteRequestBuilder &operator=(const FileWriteRequestBuilder &);
  flatbuffers::Offset<FileWriteRequest> Finish() {
    auto o = flatbuffers::Offset<FileWriteRequest>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<FileWriteRequest> CreateFileWriteRequest(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t id = 0,
   flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data = 0) {
  FileWriteRequestBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_id(id);
  return builder_.Finish();
}

struct FileWriteResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint8_t success() const { return GetField<uint8_t>(4, 0); }
  const flatbuffers::String *error_msg() const { return GetPointer<const flatbuffers::String *>(6); }
  uint64_t bytes_written() const { return GetField<uint64_t>(8, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, 4 /* success */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* error_msg */) &&
           verifier.Verify(error_msg()) &&
           VerifyField<uint64_t>(verifier, 8 /* bytes_written */) &&
           verifier.EndTable();
  }
};

struct FileWriteResponseBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_success(uint8_t success) { fbb_.AddElement<uint8_t>(4, success, 0); }
  void add_error_msg(flatbuffers::Offset<flatbuffers::String> error_msg) { fbb_.AddOffset(6, error_msg); }
  void add_bytes_written(uint64_t bytes_written) { fbb_.AddElement<uint64_t>(8, bytes_written, 0); }
  FileWriteResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  FileWriteResponseBuilder &operator=(const FileWriteResponseBuilder &);
  flatbuffers::Offset<FileWriteResponse> Finish() {
    auto o = flatbuffers::Offset<FileWriteResponse>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<FileWriteResponse> CreateFileWriteResponse(flatbuffers::FlatBufferBuilder &_fbb,
   uint8_t success = 0,
   flatbuffers::Offset<flatbuffers::String> error_msg = 0,
   uint64_t bytes_written = 0) {
  FileWriteResponseBuilder builder_(_fbb);
  builder_.add_bytes_written(bytes_written);
  builder_.add_error_msg(error_msg);
  builder_.add_success(success);
  return builder_.Finish();
}

}  // namespace v3
}  // namespace daemon
}  // namespace mbtool

#endif  // FLATBUFFERS_GENERATED_FILEWRITE_MBTOOL_DAEMON_V3_H_
