<!--
    This file defines how a ROM/Kernel/etc should be patched by the patcher.

    Please copy this file to a new one before editing.
-->
<patchinfo>
    <!-- This is the name of the ROM, kernel, or other zip file -->
    <name>Name goes here</name>

    <!-- This is the regular expression for matching the filename
         http://regex101.com/ is a great place to test if the regex works -->
    <regex>Blahblah-[0-9\.]+\.zip</regex>

    <!-- If the developer of the zip file doesn't like to use consistent names,
         multiple regexes can be used -->
    <regexes>
        <regex>regular expression 1</regex>
        <regex>regular expression 2</regex>
    </regexes>

    <!-- Whether or not the file has a boot image (or multiple boot images).
         This defaults to true, so it can be omitted for most files -->
    <has-boot-image>true</has-boot-image>

    <!-- Boot images are detected automatically by default. The patcher will
         look for all files ending in ".img" or ".lok" and read their headers
         to make sure they really are boot images. If any boot images are
         missed, they can be manually specified here. -->
    <bootimages>
        <!-- Continue using autodetection (NOTE: Not currently implemented) -->
        <autodetect />
        <!-- Additional boot images -->
        <bootimage>Some_weird_filename.bin</bootimage>
    </bootimages>

    <!-- This is the type of ramdisk -->
    <ramdisk>jflte/default</ramdisk>

    <!-- Autopatchers handle non-ramdisk patching operations. This is most
         often used for patching installer scripts, so the ROM is installed
         to the correct locations.

         Note that autopatchers are always run in the order listed. -->
    <autopatchers>
        <!-- StandardPatcher attempts to replace every mount, unmount, and
             format line in META-INF/com/google/android/updater-script file
             with the equivalent dualboot-safe call to 'dualboot.sh'. In
             addition, it will try to dump the kernel partition to
             /data/media/0/MultiKernels/ after it's been written, so the user
             won't need to use the Set Kernel function in the DualBootPatcher
             app.

             NOTE: This only supports edify updater-script files. Do NOT use
             this if updater-script is a shell script, binary, or any other type
             of file. -->
        <autopatcher>StandardPatcher</autopatcher>

        <!-- This autopatcher allows the input zip to be patched using a
             patch/diff file. It is generally a good idea to list this
             autopatcher first if it modifies files that other autopatchers
             also modify. -->
        <autopatcher file="something.patch">PatchFile</autopatcher>
    </autopatchers>
</patchinfo>
