<!--
    This file defines how a ROM/Kernel/etc should be patched by the patcher.

    Please copy this file to a new one before editing.
-->
<patchinfo>
    <!-- This is the name of the ROM, kernel, or other zip file -->
    <name>Name goes here</name>

    <!-- This is the regular expression for matching the filename
         http://regex101.com/ is a great place to test if the regex works -->
    <regex>Blahblah-[0-9\.]+\.zip</regex>

    <!-- If the developer of the zip file doesn't like to use consistent names,
         multiple regexes can be used -->
    <regexes>
        <regex>regular expression 1</regex>
        <regex>regular expression 2</regex>
    </regexes>

    <!-- Whether or not the file has a boot image (or multiple boot images).
         This defaults to true, so it can be omitted for most files -->
    <has-boot-image>true</has-boot-image>

    <!-- Boot images are detected automatically by default. The patcher will
         look for all files ending in ".img" or ".lok" and read their headers
         to make sure they really are boot images. If any boot images are
         missed, they can be manually specified here. -->
    <bootimages>
        <!-- Continue using autodetection (NOTE: Not currently implemented) -->
        <autodetect />
        <!-- Additional boot images -->
        <bootimage>Some_weird_filename.bin</bootimage>
    </bootimages>

    <!-- This is the type of ramdisk -->
    <ramdisk>jflte/default</ramdisk>

    <!-- Autopatchers handle non-ramdisk patching operations. This is most
         often used for patching installer scripts, so the ROM is installed
         to the correct locations.

         Note that autopatchers are always run in the order listed. -->
    <autopatchers>
        <!-- StandardPatcher attempts to replace every mount, unmount, and
             format line in META-INF/com/google/android/updater-script file
             with the equivalent dualboot-safe call to 'dualboot.sh'. In
             addition, it will try to dump the kernel partition to
             /data/media/0/MultiKernels/ after it's been written, so the user
             won't need to use the Set Kernel function in the DualBootPatcher
             app.

             NOTE: This only supports edify updater-script files. Do NOT use
             this if updater-script is a shell script, binary, or any other type
             of file. -->
        <autopatcher>StandardPatcher</autopatcher>

        <!-- This autopatcher allows the input zip to be patched using a
             patch/diff file. It is generally a good idea to list this
             autopatcher first if it modifies files that other autopatchers
             also modify. -->
        <autopatcher file="something.patch">PatchFile</autopatcher>

        <!-- This is a specialized patcher that is not needed unless the input
             file has a script that runs during installation that calls the
             "unzip" command. This is needed because the recovery's "unzip"
             program is not compiled with support for data descriptors, which
             are present in zip files created by the patcher.

             This command will make the following changes to the specified
             script:

             1. After the shebang line (eg. #!/bin/bash), the patcher will
                insert:

                  sed '1,/UNZIP_MAGIC/d' "${0}" | base64 -d | xz -d > /tmp/unzip
                  chmod 777 /tmp/unzip

             2. At the end of the script, the patcher will insert:

                  exit 0
                  UNZIP_MAGIC
                  <base64 encoded data of unzip binary>

             3. The specified unzip command will be replaced with /tmp/unzip.

             This effectively makes the script extract the miniunzip binary,
             and run that instead of the recovery's own unzip program.

             Two parameters are required:
             - file: Path in zip file to the script that runs 'unzip'
             - command: The command that will be replaced with /tmp/unzip. If
                        not specified, only steps (1) and (2) above will be
                        performed.

             Multiple files and commands can be specified by separating them
             with a semicolon. -->
        <autopatcher file="META-INF/com/google/android/updater-script" command="/sbin/unzip">UnzipPatcher</autopatcher>
    </autopatchers>

    <!-- If set to false, the patcher will try to remove the device checks/
         asserts inside the updater-script file. This defaults to true, so it
         can usually be omitted.

         The assert statements are effectively disabled by prepending
         '"true" == "true" ||' to the beginning of the boolean expression. -->
    <device-check>true</device-check>

    <!-- If the parameters above need to be changed based on the filename (say,
         a certain version requires some tweaks, they can be overridden here.
         Every parameter besides <name>, <regex>, and <regexes> can be
         overridden.

         NOTE: List parameters, like <bootimages> and <autopatchres> are
         appended to the global parameter. If you don't want that to happen,
         move the global parameter to <not-matched> -->
    <matches regex="Blahblah-2.0\.zip">
        <bootimages>
            <bootimage>onlyinversion2.0.bin</bootimage>
        </bootimages>
    </matches>

    <!-- These overrides are used if none of the above <matches> conditions are
         matched. Everything that can be overriden by <matches> can also be
         overridden by <not-matched> -->
    <not-matched>
        <bootimages>
            <bootimage>onlyinotherversions.bin</bootimage>
        </bootimages>
    </not-matched>
</patchinfo>
