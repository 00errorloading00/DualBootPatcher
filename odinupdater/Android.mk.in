_LOCAL_PATH := @CMAKE_CURRENT_SOURCE_DIR@

# Whether ccache should be used (highly recommended!)
USE_CCACHE := true

TOP_DIR := @CMAKE_SOURCE_DIR@
EXTERNAL_DIR := $(TOP_DIR)/external

include @CMAKE_BINARY_DIR@/libmbp/Android.include.mk
include @CMAKE_BINARY_DIR@/libmbpio/Android.include.mk
include @CMAKE_BINARY_DIR@/libmbutil/Android.include.mk
include @CMAKE_BINARY_DIR@/thirdparty/Android.mk

LOCAL_PATH := $(_LOCAL_PATH)

ifeq ($(USE_CCACHE),true)
TARGET_CC := ccache $(TARGET_CC)
TARGET_CXX := ccache $(TARGET_CXX)
endif

include $(CLEAR_VARS)
LOCAL_SRC_FILES := odinupdater.cpp
LOCAL_MODULE := odinupdater
LOCAL_STATIC_LIBRARIES := \
	libarchive \
	libmbp-mini \
	libmbutil
LOCAL_C_INCLUDES := $(TOP_DIR)
LOCAL_CFLAGS := \
	-Wall -Wextra -Werror \
	-ffunction-sections -fdata-sections \
	-DSTRICTZIPUNZIP
LOCAL_LDFLAGS := \
	-Wl,--gc-sections \
	-static \
	-lz
# Workaround https://code.google.com/p/android/issues/detail?id=177690
LOCAL_LDFLAGS += -fuse-ld=bfd
include $(BUILD_EXECUTABLE)

include $(CLEAR_VARS)
LOCAL_SRC_FILES := fuse-sparse.cpp
LOCAL_MODULE := fuse-sparse
LOCAL_STATIC_LIBRARIES := fuse libmbp-mini libmbpio
LOCAL_C_INCLUDES := $(TOP_DIR)
LOCAL_CFLAGS := \
	-Wall -Wextra -Werror \
	-ffunction-sections -fdata-sections \
	-D_FILE_OFFSET_BITS=64
LOCAL_LDFLAGS := \
	-Wl,--gc-sections \
	-static
include $(BUILD_EXECUTABLE)
