include @CMAKE_BINARY_DIR@/ndk/common.mk
include @CMAKE_BINARY_DIR@/libmblog/Android.static.include.mk
include @CMAKE_BINARY_DIR@/thirdparty/Android.mk

LOCAL_PATH := @CMAKE_CURRENT_SOURCE_DIR@

# If set to true, util/properties.cpp will try to dlopen libc.so to read/write
# properties
DYNAMICALLY_LINKED := false

TOP_DIR := @CMAKE_SOURCE_DIR@
EXTERNAL_DIR := $(TOP_DIR)/external

mbutil_src := \
	src/autoclose/dir.cpp \
	src/autoclose/file.cpp \
	src/archive.cpp \
	src/chmod.cpp \
	src/chown.cpp \
	src/cmdline.cpp \
	src/command.cpp \
	src/copy.cpp \
	src/delete.cpp \
	src/directory.cpp \
	src/file.cpp \
	src/fstab.cpp \
	src/fts.cpp \
	src/hash.cpp \
	src/loopdev.cpp \
	src/mount.cpp \
	src/path.cpp \
	src/properties.cpp \
	src/selinux.cpp \
	src/socket.cpp \
	src/string.cpp \
	src/time.cpp \
	src/vibrate.cpp \
	external/mntent.c

mbutil_cflags := \
	$(mb_global_cflags)

ifeq ($(DYNAMICALLY_LINKED),true)
mbutil_cflags += -DDYNAMICALLY_LINKED
endif

mbutil_includes := \
	$(mb_global_c_includes) \
	$(EXTERNAL_DIR)


include $(CLEAR_VARS)
LOCAL_SRC_FILES := $(mbutil_src)
LOCAL_MODULE := libmbutil-static
LOCAL_STATIC_LIBRARIES := \
	prebuilt-libmblog-static \
	libarchive \
	libsepol \
	libcrypto \
	liblz4 \
	liblzma \
	liblzo2
LOCAL_CFLAGS := $(mbutil_cflags)
LOCAL_C_INCLUDES := $(mbutil_includes)
include $(BUILD_STATIC_LIBRARY)
