/*
 * Copyright (C) 2014  Andrew Gunnerson <andrewgunnerson@gmail.com>
 *
 * This file is part of MultiBootPatcher
 *
 * MultiBootPatcher is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * MultiBootPatcher is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with MultiBootPatcher.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "ramdiskpatchers/coreramdiskpatcher.h"

#include <regex>

#include <boost/algorithm/string/classification.hpp>
#include <boost/algorithm/string/join.hpp>
#include <boost/algorithm/string/predicate.hpp>
#include <boost/algorithm/string/split.hpp>
#include <boost/filesystem/path.hpp>

#include <cppformat/format.h>

#include "patcherconfig.h"


namespace mbp
{

/*! \cond INTERNAL */
class CoreRamdiskPatcher::Impl
{
public:
    const PatcherConfig *pc;
    const FileInfo *info;
    CpioFile *cpio;

    PatcherError error;
};
/*! \endcond */


static const std::string MbtoolDaemonService
        = "\nservice mbtooldaemon /mbtool daemon\n"
        "    class main\n"
        "    user root\n"
        "    oneshot\n";

static const std::string DataMediaContext =
        "/data/media(/.*)? u:object_r:media_rw_data_file:s0";

static const std::string InitRc = "init.rc";
static const std::string FileContexts = "file_contexts";

CoreRamdiskPatcher::CoreRamdiskPatcher(const PatcherConfig * const pc,
                                       const FileInfo * const info,
                                       CpioFile * const cpio) :
    m_impl(new Impl())
{
    m_impl->pc = pc;
    m_impl->info = info;
    m_impl->cpio = cpio;
}

CoreRamdiskPatcher::~CoreRamdiskPatcher()
{
}

PatcherError CoreRamdiskPatcher::error() const
{
    return m_impl->error;
}

std::string CoreRamdiskPatcher::id() const
{
    return std::string();
}

bool CoreRamdiskPatcher::patchRamdisk()
{
    if (!addDaemonService()) {
        return false;
    }
    if (!fixDataMediaContext()) {
        return false;
    }
    return true;
}

bool CoreRamdiskPatcher::addDaemonService()
{
    std::vector<unsigned char> initRc;
    if (!m_impl->cpio->contents(InitRc, &initRc)) {
        m_impl->error = m_impl->cpio->error();
        return false;
    }

    initRc.insert(initRc.end(),
                  MbtoolDaemonService.begin(), MbtoolDaemonService.end());

    m_impl->cpio->setContents(InitRc, std::move(initRc));

    return true;
}

/*!
 * Some ROMs omit the line in /file_contexts that sets the context of
 * /data/media/* to u:object_r:media_rw_data_file:s0. This is fine if SELinux
 * is set to permissive mode or if the SELinux policy has no restriction on
 * the u:object_r:device:s0 context (inherited from /data), but after restorecon
 * is run, the incorrect context may affect ROMs that have a stricter policy.
 */
bool CoreRamdiskPatcher::fixDataMediaContext()
{
    if (!m_impl->cpio->exists(FileContexts)) {
        return true;
    }

    bool hasDataMediaContext = false;

    std::vector<unsigned char> contents;
    m_impl->cpio->contents(FileContexts, &contents);

    std::vector<std::string> lines;
    boost::split(lines, contents, boost::is_any_of("\n"));

    for (auto it = lines.begin(); it != lines.end(); ++it) {
        if (boost::starts_with(*it, "/data/media")) {
            hasDataMediaContext = true;
        }
    }

    if (!hasDataMediaContext) {
        lines.push_back(DataMediaContext);
    }

    std::string strContents = boost::join(lines, "\n");
    contents.assign(strContents.begin(), strContents.end());
    m_impl->cpio->setContents(FileContexts, std::move(contents));

    return true;
}

static std::string whitespace(const std::string &str) {
    auto nonSpace = std::find_if(str.begin(), str.end(),
                                 std::not1(std::ptr_fun<int, int>(isspace)));
    int count = std::distance(str.begin(), nonSpace);

    return str.substr(0, count);
}

bool CoreRamdiskPatcher::useGeneratedFstab(const std::string &filename)
{
    std::vector<unsigned char> contents;
    if (!m_impl->cpio->contents(filename, &contents)) {
        m_impl->error = m_impl->cpio->error();
        return false;
    }

    std::vector<std::string> lines;
    boost::split(lines, contents, boost::is_any_of("\n"));

    std::vector<std::string> fstabs;

    for (auto it = lines.begin(); it != lines.end(); ++it) {
        std::smatch what;

        if (std::regex_search(*it, what,
                std::regex("^\\s+mount_all\\s+([^\\s]+)\\s*(#.*)?$"))) {
            // Use fstab generated by mbtool
            std::string spaces = whitespace(*it);

            std::string fstab = what[1];
            boost::filesystem::path fstab_path(fstab);
            std::string dir_name = fstab_path.parent_path().string();
            std::string base_name = fstab_path.filename().string();
            std::string completed = dir_name + "/." + base_name + ".completed";
            std::string generated = dir_name + "/." + base_name + ".gen";

            // Debugging this: "- exec '/system/bin/sh' failed: No such file or directory (2) -"
            // sure was fun... Turns out service names > 16 characters are rejected
            // See valid_name() in https://android.googlesource.com/platform/system/core/+/master/init/init_parser.c

            // Keep track of fstabs, so we can create services for them
            int index;
            auto it2 = std::find(fstabs.begin(), fstabs.end(), fstab);
            if (it2 == fstabs.end()) {
                index = fstabs.size();
                fstabs.push_back(fstab);
            } else {
                index = it2 - fstabs.begin();
            }

            std::string serviceName = fmt::format("mbtool-mount-{:03d}", index);

            // Start mounting service
            it = lines.insert(it, spaces + "start " + serviceName);
            // Wait for mount to complete (this sucks, but only custom ROMs
            // implement the 'exec' init script command)
            it = lines.insert(++it, spaces + "wait " + completed + " 15");
            // Mount generated fstab
            ++it;
            *it = spaces + "mount_all " + generated;
        }
    }

    for (unsigned int i = 0; i < fstabs.size(); ++i) {
        std::string serviceName = fmt::format("mbtool-mount-{:03d}", i);

        lines.push_back(fmt::format(
                "service {} /mbtool mount_fstab {}", serviceName, fstabs[i]));
        lines.push_back("    class core");
        lines.push_back("    critical");
        lines.push_back("    oneshot");
        lines.push_back("    disabled");
    }

    std::string strContents = boost::join(lines, "\n");
    contents.assign(strContents.begin(), strContents.end());
    m_impl->cpio->setContents(filename, std::move(contents));

    return true;
}

bool CoreRamdiskPatcher::useGeneratedFstabAuto()
{
    for (const std::string &file : m_impl->cpio->filenames()) {
        if (file.find('/') == std::string::npos
                && boost::starts_with(file, "init.")
                && boost::ends_with(file, ".rc")) {
            if (!useGeneratedFstab(file)) {
                return false;
            }
        }
    }

    return true;
}

}