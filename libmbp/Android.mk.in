#_LOCAL_PATH := $(call my-dir)
_LOCAL_PATH := @CMAKE_CURRENT_SOURCE_DIR@

# Whether ccache should be used (highly recommended!)
USE_CCACHE := true

THIRD_PARTY := @CMAKE_BINARY_DIR@/thirdparty
LIBARCHIVE_DIR := $(THIRD_PARTY)/android/libarchive
LIBLZO2_DIR := $(THIRD_PARTY)/android/liblzo2
LIBLZ4_DIR := $(THIRD_PARTY)/android/liblz4
LIBLZMA_DIR := $(THIRD_PARTY)/android/liblzma
MBP_IO_DIR := @CMAKE_BINARY_DIR@/libmbpio/mbpio-android-prefix/tmp/local
TOP_DIR := @CMAKE_SOURCE_DIR@
EXTERNAL_DIR := $(TOP_DIR)/external


ifneq ($(MBP_MINI),true)
include $(EXTERNAL_DIR)/minizip/Android.mk
endif


include $(CLEAR_VARS)
LOCAL_MODULE    := libarchive
LOCAL_SRC_FILES := $(LIBARCHIVE_DIR)/lib_$(TARGET_ARCH_ABI)/libarchive.a
include $(PREBUILT_STATIC_LIBRARY)


include $(CLEAR_VARS)
LOCAL_MODULE    := liblzo2
LOCAL_SRC_FILES := $(LIBLZO2_DIR)/lib_$(TARGET_ARCH_ABI)/liblzo2.a
include $(PREBUILT_STATIC_LIBRARY)


include $(CLEAR_VARS)
LOCAL_MODULE    := liblz4
LOCAL_SRC_FILES := $(LIBLZ4_DIR)/lib_$(TARGET_ARCH_ABI)/liblz4.a
include $(PREBUILT_STATIC_LIBRARY)


include $(CLEAR_VARS)
LOCAL_MODULE    := liblzma
LOCAL_SRC_FILES := $(LIBLZMA_DIR)/lib_$(TARGET_ARCH_ABI)/liblzma.a
include $(PREBUILT_STATIC_LIBRARY)


include $(CLEAR_VARS)
LOCAL_MODULE    := libmbpio
LOCAL_SRC_FILES := $(MBP_IO_DIR)/$(TARGET_ARCH_ABI)/libmbpio.a
include $(PREBUILT_STATIC_LIBRARY)


include $(CLEAR_VARS)
LOCAL_MODULE    := libc_compat
LOCAL_SRC_FILES := $(MBP_IO_DIR)/$(TARGET_ARCH_ABI)/libc_compat.a
include $(PREBUILT_STATIC_LIBRARY)


ifeq ($(USE_CCACHE),true)
TARGET_CC := ccache $(TARGET_CC)
TARGET_CXX := ccache $(TARGET_CXX)
endif

LOCAL_PATH := $(_LOCAL_PATH)

include $(CLEAR_VARS)
LOCAL_SRC_FILES := @MBP_SOURCES_STR@

ifeq ($(MBP_MINI),true)
LOCAL_MODULE := libmbp-mini
else
LOCAL_MODULE := libmbp
endif
LOCAL_MODULE_TAGS := eng

LOCAL_C_INCLUDES := \
	$(LIBARCHIVE_DIR)/include \
	$(EXTERNAL_DIR) \
	$(TOP_DIR)

#LOCAL_CFLAGS := -Wall -Wextra -Werror -pedantic
LOCAL_CFLAGS := -Wall -Wextra -pedantic
#LOCAL_CFLAGS += -fstack-protector-all -D_FORTIFY_SOURCE=2
#LOCAL_CFLAGS += -Wl,-z,noexecstack -Wl,-z,now -Wl,-z,relro -pie
LOCAL_CFLAGS += -pie
LOCAL_CFLAGS += -Wl,--no-undefined
LOCAL_CFLAGS += -fno-exceptions -fno-rtti
#LOCAL_CFLAGS += -fvisibility=hidden
# There are some '/*' in doxygen comment blocks
LOCAL_CFLAGS += -Wno-error=comment
# Version number
LOCAL_CFLAGS += -DLIBMBP_VERSION=\"@MBP_VERSION@\"
# minizip type safety
LOCAL_CFLAGS += -DSTRICTZIPUNZIP

ifeq ($(MBP_MINI),true)
LOCAL_CFLAGS += -DLIBMBP_MINI
endif

LOCAL_CFLAGS += -ffunction-sections -fdata-sections -O2

ifneq ($(MBP_MINI),true)
LOCAL_LDFLAGS := -Wl,--gc-sections -O2

# Link libc statically, so we can use API 21 functions, like nftw(). Also
# needed for minimal LFS support (open64, etc.)
#TARGET_LDLIBS := -lgcc
#LOCAL_LDLIBS += -nodefaultlibs -Wl,-Bstatic -lc -lm -Wl,-Bdynamic
#LOCAL_LDLIBS += -static-libgcc -Wl,-Bstatic -lc -lm -Wl,-Bdynamic
#LOCAL_LDLIBS += -lm

LOCAL_LDLIBS += -lz
LOCAL_LDLIBS += -llog
endif

LOCAL_STATIC_LIBRARIES := \
	libmbpio \
	libarchive \
	liblzo2 \
	liblz4 \
	liblzma \
	libminizip

ifneq ($(MBP_MINI),true)
LOCAL_STATIC_LIBRARIES += libc_compat
endif

ifeq ($(MBP_MINI),true)
include $(BUILD_STATIC_LIBRARY)
else
include $(BUILD_SHARED_LIBRARY)
endif
